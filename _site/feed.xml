<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-14T09:12:33+08:00</updated><id>http://localhost:4000/</id><title type="html">Hello Code1</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">【Java基础篇】第7章：异常、断言和日志</title><link href="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/12/%E5%BC%82%E5%B8%B8%E5%8F%8A%E6%97%A5%E5%BF%97.html" rel="alternate" type="text/html" title="【Java基础篇】第7章：异常、断言和日志" /><published>2017-11-12T22:30:57+08:00</published><updated>2017-11-12T22:30:57+08:00</updated><id>http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/12/%E5%BC%82%E5%B8%B8%E5%8F%8A%E6%97%A5%E5%BF%97</id><content type="html" xml:base="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/12/%E5%BC%82%E5%B8%B8%E5%8F%8A%E6%97%A5%E5%BF%97.html">&lt;h2 id=&quot;第7章异常断言和日志&quot;&gt;第7章：异常、断言和日志&lt;/h2&gt;</content><author><name></name></author><category term="Java" /><summary type="html">第7章：异常、断言和日志</summary></entry><entry><title type="html">【Java基础篇】第6章：接口、lambda表达式与内部类</title><link href="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/12/%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%86%85%E9%83%A8%E7%B1%BB.html" rel="alternate" type="text/html" title="【Java基础篇】第6章：接口、lambda表达式与内部类" /><published>2017-11-12T22:30:57+08:00</published><updated>2017-11-12T22:30:57+08:00</updated><id>http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/12/%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%86%85%E9%83%A8%E7%B1%BB</id><content type="html" xml:base="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/12/%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%86%85%E9%83%A8%E7%B1%BB.html">&lt;h2 id=&quot;第六章接口lambda表达式与内部类&quot;&gt;第六章：接口、lambda表达式与内部类&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。&lt;/li&gt;
  &lt;li&gt;接口中所有的方法都自动的属于public。因此，在接口中声明方法时，不必提供关键字public。但是在实现类中必须将方法声明为public&lt;/li&gt;
  &lt;li&gt;implements 实现接口的关键字  class Person implements Comparable&lt;/li&gt;
  &lt;li&gt;可以使用instanceof来检查一个对象是否实现了某个特定的接口&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (anyObject instanceof Comparable ) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;接口也可以扩展另外的接口，这个超类的使用方式一样。&lt;/li&gt;
  &lt;li&gt;接口中也可以定义变量，接口中的域都自动被设为 public static final类型.虽然可以显示定义，但是并不推荐，因为没必要有那么多冗余的关键字。&lt;/li&gt;
  &lt;li&gt;每个类只能够拥有一个超类，但却可以实现多个接口。这就为定义类的行为提供了极大的灵活性。比如要设计一个类具备克隆和比较的能力，实现两个接口即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Employee implements Cloneable,Comparable {
	...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;有些情况下会有定义抽象类，然后在子类中重写抽象类中的方法。这个跟定义接口，然后继承接口实现方法有一定的相似性。但是抽象类有一个问题就是类的继承只能扩展一个类。&lt;/li&gt;
  &lt;li&gt;浅拷贝：如果clone对象中引用了其他的子对象，在clone的时候不会克隆子对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lambda表达式&quot;&gt;lambda表达式&lt;/h3&gt;
&lt;p&gt;lambda表达式语法：
参数，箭头-&amp;gt;，以及一个表达式，如果代码要完成的计算无法放在一个表达式中，就可以将这些代码放在{}中，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(String first,String second) - &amp;gt;
{
	return first.length() - second.length();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即使lambda表达式没有参数，仍然要提供空括号，就像无参方法一样。如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;() - &amp;gt; { for (int i=100;i&amp;gt;=0;i++) System.out.print(i);}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;this::equals 等同于x-&amp;gt;this.equals(x)&lt;/li&gt;
  &lt;li&gt;使用lambda表达式的重点是延迟执行&lt;/li&gt;
  &lt;li&gt;repeat(10, () -&amp;gt; System.out.println(“hello,world”));&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;media/15105886744529.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;代理略高级技术需深入&quot;&gt;代理(略高级技术，需深入)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;利用代理可以在运行时创建一个实现了一组给定接口的新类，这种功能只有在编译时无法确定需要实现哪个接口时才有必要使用。&lt;/li&gt;
  &lt;li&gt;创建代理对象，需要使用Proxy类的newProxyInstance方法，这个方法有三个参数：
    &lt;ul&gt;
      &lt;li&gt;类加载器(class loader)&lt;/li&gt;
      &lt;li&gt;Class对象数组，每个元素都是需要实现的接口&lt;/li&gt;
      &lt;li&gt;调用处理器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用代理的原因：
    &lt;ul&gt;
      &lt;li&gt;路由对远程服务器的方法调用&lt;/li&gt;
      &lt;li&gt;在程序运行期间，将用户接口事件与动作关联起来&lt;/li&gt;
      &lt;li&gt;为调试，跟踪方法调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;注意：代理类是在运行过程中创建的，一旦被创建，就变成了常规类，与虚拟机中的任何其他类没有什么区别&lt;/li&gt;
  &lt;li&gt;所有的代理类都扩展于Proxy类，一个代理类只有一个实例域-调用处理器，它定义在Proxy的超类中。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">第六章：接口、lambda表达式与内部类 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。 接口中所有的方法都自动的属于public。因此，在接口中声明方法时，不必提供关键字public。但是在实现类中必须将方法声明为public implements 实现接口的关键字 class Person implements Comparable 可以使用instanceof来检查一个对象是否实现了某个特定的接口</summary></entry><entry><title type="html">【Java基础篇】第5章：继承</title><link href="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/07/Java%E5%9F%BA%E7%A1%80-%E7%BB%A7%E6%89%BF.html" rel="alternate" type="text/html" title="【Java基础篇】第5章：继承" /><published>2017-11-07T22:30:57+08:00</published><updated>2017-11-07T22:30:57+08:00</updated><id>http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/07/Java%E5%9F%BA%E7%A1%80-%E7%BB%A7%E6%89%BF</id><content type="html" xml:base="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/11/07/Java%E5%9F%BA%E7%A1%80-%E7%BB%A7%E6%89%BF.html">&lt;h2 id=&quot;第五章继承&quot;&gt;第五章：继承&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;is-a 关系是继承的一个明显特征。&lt;/li&gt;
  &lt;li&gt;关键字 extends表示继承。表明正在构造的新类派生于一个已经存在的类，已存在的类称为超类(superclass)、基类(base class)或父类(parent class)&lt;/li&gt;
  &lt;li&gt;使用super.getMethod()来调用超类中的方法。super不是一个对象的应用，不能将super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。&lt;/li&gt;
  &lt;li&gt;如果子类的构造器没有显示的调用超类的构造器，则将自动地调用超类默认（没有参数）的构造器。&lt;/li&gt;
  &lt;li&gt;一个对象变量可以指示多种实际类型的现象被称为多态。在运行时能够自动地选择调用哪个方法的现象被称为动态绑定&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;超类对象任何时候都可以用子类对象置换&lt;/strong&gt;。反之则不行。如下&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Employee e; # 超类
e = new Employee();
e = new Manager();  # Manager是Employee的子类

Manager manager = new Manager();
Employee e = manager;# 非法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这就是多态&lt;/p&gt;

&lt;h4 id=&quot;枚举类&quot;&gt;枚举类&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;比较两个枚举类型的值时，永远不需要调用equals，而直接使用”==”就可以了&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public enum Size {
	SMALL,
	MEDIUM,
	LARGE
}

Size s = Enum.valueOf(Size.class,&quot;SMALL&quot;); # 通过toString的逆方法valueOf来获取枚举对象
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;反射&quot;&gt;反射&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;能够分析类能力的程序称为反射（reflective），反射可以用来做以下事情：
    &lt;ul&gt;
      &lt;li&gt;在运行时分析类的能力&lt;/li&gt;
      &lt;li&gt;在运行时查看对象，例如，编写一个toString方法供所有类使用&lt;/li&gt;
      &lt;li&gt;实现通用的数组操作代码&lt;/li&gt;
      &lt;li&gt;利用Method对象，这个对象很像C++中的函数指针&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;反射是一种功能强大且复杂的机制。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Class.forName(“”) 创建类，然后通过newInstance()来创建对象，但是这种方式只能创建无参构造器。如果需要创建的类的构造器提供参数， 就不要使用上面那条语句， 而必须使用 Constructor 类中的 newlnstance 方法。&lt;/li&gt;
  &lt;li&gt;反射机制最重要的内容-检查类的结构。在java.lang.reflect包中有三个类 Field、Method、Constructor分别用于描述类的域、方法和构造器。这三个类都有一个叫做getName的方法，用来返回项目的名称。&lt;/li&gt;
  &lt;li&gt;Class类中的getFields、getMethods、getConstructors方法将分别返回类提供的public域、方法和构造器数组，其中包括超类的公有成员。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;继承的设计技巧&quot;&gt;继承的设计技巧&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;将公共操作和域放在超类&lt;/li&gt;
  &lt;li&gt;不要使用受保护的域
    &lt;ul&gt;
      &lt;li&gt;因为子类集合是无限制的，任何一个人都能够由某个类派生一个子类，并编写代码以直接访问protected的实例，从而破坏了封装性。同一个包都能访问所有类的proteced域。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用继承实现”is-a”关系&lt;/li&gt;
  &lt;li&gt;除非所有继承的方法都有意义，否则不要使用继承&lt;/li&gt;
  &lt;li&gt;在覆盖方法时，不要改变预期的行为&lt;/li&gt;
  &lt;li&gt;使用多态，而非类型信息&lt;/li&gt;
  &lt;li&gt;不要过多的使用反射。反射是很脆弱的，即编译器很难帮助人们发现程序中的错误，因此只有在运行时才发现错误并导致异常。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;多态&quot;&gt;多态&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;通过超类能够引用不同的子类，只有在运行的时候才知道引用变量所指向的具体实例对象&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">第五章：继承</summary></entry><entry><title type="html">201711月学习计划</title><link href="http://localhost:4000/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2017/10/25/201711%E6%9C%88%E8%AE%A1%E5%88%92.html" rel="alternate" type="text/html" title="201711月学习计划" /><published>2017-10-25T08:00:57+08:00</published><updated>2017-10-25T08:00:57+08:00</updated><id>http://localhost:4000/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2017/10/25/201711%E6%9C%88%E8%AE%A1%E5%88%92</id><content type="html" xml:base="http://localhost:4000/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2017/10/25/201711%E6%9C%88%E8%AE%A1%E5%88%92.html">&lt;h2 id=&quot;201711月学习计划&quot;&gt;2017.11月学习计划&lt;/h2&gt;

&lt;h3 id=&quot;1-阅读&quot;&gt;1. 阅读&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;《Java核心技术》&lt;/li&gt;
  &lt;li&gt;《尽在双11》&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-编码&quot;&gt;2. 编码&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Python基础语法温习&lt;/li&gt;
  &lt;li&gt;Go基础语法大概了解下&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-英语&quot;&gt;3. 英语&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;待定&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="学习计划" /><summary type="html">2017.11月学习计划</summary></entry><entry><title type="html">【Java基础篇】第3章：Java基本程序设计结构</title><link href="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/25/Java%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84.html" rel="alternate" type="text/html" title="【Java基础篇】第3章：Java基本程序设计结构" /><published>2017-10-25T08:00:57+08:00</published><updated>2017-10-25T08:00:57+08:00</updated><id>http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/25/Java%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84</id><content type="html" xml:base="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/25/Java%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84.html">&lt;h2 id=&quot;java核心技术卷1基础知识&quot;&gt;Java核心技术.卷1基础知识&lt;/h2&gt;

&lt;h3 id=&quot;第2章java基本程序设计结构&quot;&gt;第2章：Java基本程序设计结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Java语言规范，main方法必须声明为public&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java虚拟机从指定类的main方法开始执行。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ClassName {
	public static void main(String[] args) {
		System.out.print(&quot;hello&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.3 数据类型&lt;/p&gt;

&lt;p&gt;Java是一种强类型语言，共有8种基本类型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4种整型
    &lt;ul&gt;
      &lt;li&gt;int：4字节（-20亿 ~ 20亿）&lt;/li&gt;
      &lt;li&gt;short：2字节（-32768 ~ 32768）&lt;/li&gt;
      &lt;li&gt;long：8字节&lt;/li&gt;
      &lt;li&gt;byte：1字节（-128 ~ 127）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2种浮点类型
    &lt;ul&gt;
      &lt;li&gt;float：4字节（有效位数为6~7位）。float类型的数值有一个F或f的后缀。如果没有F或f后缀的，默认为double类型。也可以在浮点数值后添加D或者d&lt;/li&gt;
      &lt;li&gt;double：8字节（有效位数为15位）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1种用于表示Unicode编码的字符单元的字符类型char&lt;/li&gt;
  &lt;li&gt;1种表示真值的boolean类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;码点（code point）是指与一个编码表中的某个子符对应的代码值。在Unicode标准中，码点采用十六进制书写，并加上前缀U+&lt;/p&gt;

&lt;p&gt;UTF-16编码采用不同长度的编码表示所有Unicode码点。&lt;/p&gt;

&lt;p&gt;强烈建议不要在程序中使用char类型。&lt;/p&gt;

&lt;p&gt;在Java中，变量的声明尽可能的靠近第一次使用的地方，这是一种良好的编码习惯。&lt;/p&gt;

&lt;p&gt;final指示常量。只能被赋值一次，一旦被赋值之后，就不能再更改了。习惯上常量名全使用大写。&lt;/p&gt;

&lt;p&gt;枚举类型：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Size { 
	SMALL, 
	MEDIUM, 
	LARGE, 
	EXTR_LARCE 
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Java字符串就是Unicode字符序列。Java没有内置的字符串类型，而是在标准类库中提供了一个预定义类。&lt;/p&gt;

&lt;p&gt;使用string.equals(t)  来比较两个字符串是否相等，千万不要使用 = 号&lt;/p&gt;

&lt;p&gt;if(str != null &amp;amp;&amp;amp; str.length() != 0)&lt;/p&gt;

&lt;p&gt;格式符的转化：
&lt;img src=&quot;media/15096347870030.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;格式化时间：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.out.printf(&quot;%tF&quot;,new Date());
# 自定义日期格式，通过字符串格式化的方式，用%开头，然后加上索引号，以$结尾。如下
System.out.printf(&quot;%1$s %2$tB %2$te %2$tY&quot;,&quot;Date:&quot;,new Date());
# 也可以使用以下语句。用 &amp;lt; 号来表示前面参数格式将被再次使用
System.out.printf(&quot;%s %tB %&amp;lt;te, %&amp;lt;tY&quot;, &quot;Due date:&quot;, new Date());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;media/15096354498800.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;media/15096354745827.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;printf的格式说明：
&lt;img src=&quot;media/15096364366019.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;读取文件里，一般要指定文件的编码，如果没有指定，默认读取的是运行java机器的默认编码，这可能会导致同一段程序在不同默认机器编码的服务器上得到不一样的结果&lt;/p&gt;

&lt;p&gt;先判断条件，可能不执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (condition) {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至少执行一次&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do {
}
while (condition)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以通过break+标签符号的方式来跳出多种嵌套循环。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i = 20;
int count = 20;
read://定义一个标签符号
while (i &amp;gt; 1) {
	for (int j = 0;j&amp;lt;count;j++){

		if (j == 10) {
			break read;//跳出到标签符
		}
	}
	System.out.println(Integer.toString(i));
	i--;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以通过定义lab来控制跳出语句。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lab:
{
    if (i&amp;lt;20) break lab;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;media/15098032015999.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;static 静态域定义。常用来定义变量或常量，比如一个类中定义了一个静态变量，所有的类对象都是共享这个静态变量。如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class Employee {
	private static int nextId = 1;
	private int id;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果new Employee() 1000个对象，会有1000个类的id，但是他们会共享一个nextId&lt;/p&gt;

&lt;p&gt;static final 静态变量。&lt;/p&gt;

&lt;p&gt;也可以将方法或类声明为final类型，主要目的是确保它们不会在子类中改变语义。&lt;/p&gt;

&lt;p&gt;静态方法是一种不能向对象实施操作的方法。有两种情况下使用静态方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个方法不需要访问对象状态，其所需参数都是显示参数提供&lt;/li&gt;
  &lt;li&gt;一个方法只需要访问类的静态域&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个类都可以有一个main方法，这是一个常用于对类进行单元测试的技巧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）&lt;/li&gt;
  &lt;li&gt;一个方法可以改变一个对象参数的状态&lt;/li&gt;
  &lt;li&gt;一个方法不能让对象参数引用一个新的对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;包&quot;&gt;包&lt;/h4&gt;
&lt;p&gt;使用包的主要原因是确保类名的唯一性。为了保证包名的绝对唯一性，Sun公司建议将公司的因特网域名以逆序形式作为包名。比如com.alibaba&lt;/p&gt;

&lt;p&gt;从编译器的角度看，嵌套的包之间没有任何关系。比如java.util和java.util.jar包毫无关系&lt;/p&gt;

&lt;p&gt;如果出现导入的两个包都包含相同的类，比如java.util和java.sql中都包含了 Date类，会提示包冲突。
这是可以通过增加一个特定的import语句来解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*;
import java.sql.*;
import java.util.Date; # 增加一个显示的导入

import static java.lang.System.*; # 可以增加一个静态包的导入
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果想将一个类放入包中，就必须将包的名字放在源文件的开头。如下
package com.google.hello&lt;/p&gt;

&lt;p&gt;如果没有定义package，那么会将该类放入一个默认包&lt;/p&gt;

&lt;p&gt;将包中的文件放到与完整的包名匹配的子目录中。如果包与目录不匹配，虚拟机就找不到类。&lt;/p&gt;

&lt;p&gt;虚拟机要搜寻 com.google.core.Employee类文件，它首先要查看存储在jre/lib和jre/lib/ext目录下的归档文件中所存放的系统类文件。显然，在那里找不到相应的类文件，然后再查看类路径。建议利用-classpath选项设置类路径。&lt;/p&gt;

&lt;p&gt;注释以  /** 开头，以*/结束&lt;/p&gt;

&lt;p&gt;几个类设计的技巧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一定要保证数据私有&lt;/li&gt;
  &lt;li&gt;一定要对数据初始化：最好不要依赖系统的默认值，而是应该显示的初始化所有的数据。&lt;/li&gt;
  &lt;li&gt;不要在类中使用过多的基本类型
    &lt;ul&gt;
      &lt;li&gt;如果有很多基本类型，可以封装成一个独立的类进行引用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;不是所有的域都需要独立的域访问器和域更改器&lt;/li&gt;
  &lt;li&gt;将职责过多的类进行分解&lt;/li&gt;
  &lt;li&gt;类名和方法名要能够体现他们的职责&lt;/li&gt;
  &lt;li&gt;优先使用不可变的类&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (staff[1] instanceof Manager) { #用instanceof先判断一下类型能否转换成功。
	boss = (Manager) staff[1];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;只能在继承层次内进行类型转换&lt;/li&gt;
  &lt;li&gt;在将超类转换成子类之前，应该使用instanceof进行检查。&lt;/li&gt;
  &lt;li&gt;一般情况下，应该尽量少用类型转换和instanceof运算符&lt;/li&gt;
  &lt;li&gt;为提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。&lt;/li&gt;
  &lt;li&gt;抽象方法充当着占位的角色，它们的具体实现在子类中。扩展抽象类可以有两种选择。&lt;/li&gt;
  &lt;li&gt;类即使不含抽象方法，也可以将类声明成抽象类。抽象类不能被实例化。&lt;/li&gt;
  &lt;li&gt;子类也不能访问超类中的私有对象&lt;/li&gt;
  &lt;li&gt;protected 对本包和所有子类可见。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class Person {
	private String name;
	public Person(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public abstract String getDescription();
}

public class Employee extends Person {
	public Employee(String name,String major) {
		super(name);
		this.major = major;
	}
	
	public String getDescription() {
		return &quot;eeeee&quot;;
	}
}

#定义了Person抽象类。Employee继承Person
# 因为Person是抽象类，无法实例化，所以需要用子类实例化

Person p = new Employee(&quot;long&quot;);
System.out.print(p.getDescription());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Object:所有类的超类&lt;/li&gt;
  &lt;li&gt;Object类中的equals方法用于检测一个对象是否等于另外一个对象。判断两个对象是否具有相同的引用，如果两个对象具有相同的引用，它们一定是相等的。&lt;/li&gt;
  &lt;li&gt;Objects.equals(a,null) 可以这样来判断a是否为null。当然一般情况下直接使用 == 来判断是否null更为直接简单&lt;/li&gt;
  &lt;li&gt;字符串的散列码是由内容导出的。所以相同的String定义的变量的hashCode值是一样的。但是StringBuffer类中没有定义hashCode，它的散列码是由Object类的默认hashCode方法导出的对象存储地址。&lt;/li&gt;
  &lt;li&gt;hashCode与equals结果必须一致，如果相同的两个对象，它们的hashCode是一致的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tostring&quot;&gt;toString()&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;只要对象与一个字符串通过操作符”+”连接起来，Java编译器就会自动的调用toString方法，以便获得这个对象的字符串描述。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Person p = new Persion();
System.out.print(&quot;name=&quot;+p);  #这里的会直接调用p.toString()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;打印数组，使用 Arrays.toString(数组)&lt;/li&gt;
  &lt;li&gt;ArrayList是一个采用类型参数的泛型类。
    &lt;ul&gt;
      &lt;li&gt;ArrayList&lt;Person&gt; person = new ArrayList&amp;lt;&amp;gt;();&lt;/Person&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;trimToSize() 将数组列表的存储容量消减到当前尺寸&lt;/li&gt;
  &lt;li&gt;Integer类对应的基本对象是int，将Integer类型的对象赋给int值时，将会自动的拆箱。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">Java核心技术.卷1基础知识</summary></entry><entry><title type="html">【Java基础篇】第2章：Java程序设计环境</title><link href="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83.html" rel="alternate" type="text/html" title="【Java基础篇】第2章：Java程序设计环境" /><published>2017-10-23T20:30:57+08:00</published><updated>2017-10-23T20:30:57+08:00</updated><id>http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83</id><content type="html" xml:base="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83.html">&lt;h2 id=&quot;java核心技术卷1基础知识&quot;&gt;Java核心技术.卷1基础知识&lt;/h2&gt;

&lt;h3 id=&quot;第2章java程序设计环境&quot;&gt;第2章：Java程序设计环境&lt;/h3&gt;

&lt;h4 id=&quot;java术语&quot;&gt;Java术语&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;术语名&lt;/th&gt;
      &lt;th&gt;缩写&lt;/th&gt;
      &lt;th&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Java Development Kit&lt;/td&gt;
      &lt;td&gt;JDK&lt;/td&gt;
      &lt;td&gt;编写Java程序的程序员使用的软件,Java SE的开发包。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java Runtime Environment&lt;/td&gt;
      &lt;td&gt;JRE&lt;/td&gt;
      &lt;td&gt;Java运行时环境，运行Java程序的用户使用的软件。它包含虚拟机但不包含编译器。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server JRE&lt;/td&gt;
      &lt;td&gt;–&lt;/td&gt;
      &lt;td&gt;在服务器上运行Java程序的软件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Standard Edition&lt;/td&gt;
      &lt;td&gt;SE&lt;/td&gt;
      &lt;td&gt;用于桌面或简单服务器应用的Java平台&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Enterprise Edition&lt;/td&gt;
      &lt;td&gt;EE&lt;/td&gt;
      &lt;td&gt;用于复杂服务器应用的Java平台&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Micro Edition&lt;/td&gt;
      &lt;td&gt;ME&lt;/td&gt;
      &lt;td&gt;用于手机和其他小型设备的java平台&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java FX&lt;/td&gt;
      &lt;td&gt;–&lt;/td&gt;
      &lt;td&gt;用于图形化用户界面的一个替代工具包，在Oracle的Java SE发布版本中提供&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OpenJDK&lt;/td&gt;
      &lt;td&gt;–&lt;/td&gt;
      &lt;td&gt;Java SE的一个免费开源实现，不包含浏览器集成或JavaFX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java 2&lt;/td&gt;
      &lt;td&gt;J2&lt;/td&gt;
      &lt;td&gt;一个过时的术语，用于描述1998-2006年之间的Java版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Software Development Kit&lt;/td&gt;
      &lt;td&gt;SDK&lt;/td&gt;
      &lt;td&gt;一个过时的术语，用于描述1998-2006年之间的JDK&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update&lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt;Oracle的术语，表示bug修正版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NetBeans&lt;/td&gt;
      &lt;td&gt;–&lt;/td&gt;
      &lt;td&gt;Oracle的集成开发环境&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Java最开始版本是1.0，之后版本是1.1，1.2，但是Sun公司认为小数点的版本无法体系出Java的版本更新，所以到1.5的时候直接改成版本号是5.0 这个版本是对外的，内部的版本还是以1.7.0，1.8.0，比如 java SE 8u31,表示对是对Java SE 8的第31次更新，对应的内部版本号就是1.8.0_31&lt;/p&gt;

&lt;p&gt;JDK 安装好后，需要在 ~/.bash_profile里添加到  PATH中  export PATH&lt;/p&gt;

&lt;p&gt;javac -version  //查看java版本&lt;/p&gt;

&lt;p&gt;默认安装好JDK后，默认不会安装源文件和文档。&lt;/p&gt;

&lt;p&gt;库源文件在JDK中以一个压缩文件src.zip的形式发布。必须将其解压后才能访问源码。操作步骤如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/ 目录下 mkdir javasrc&lt;/li&gt;
  &lt;li&gt;sudo cp src.zip javasrc&lt;/li&gt;
  &lt;li&gt;sudo jar xvf src.zip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;src.zip文件中包含了所有公共类库的源代码。要想获得更多的源代码（例如：编译器、虚拟机、本地方法以及私有辅助类），可以访问网站：http://jdk8.java.net&lt;/p&gt;

&lt;p&gt;javac:Java编译器
javac webcome.java  //把java代码编译成class字节码
java webcome //java启动虚拟机执行放在class中的字节码&lt;/p&gt;

&lt;p&gt;applet部分内容-略&lt;/p&gt;</content><author><name></name></author><category term="Java" /><summary type="html">Java核心技术.卷1基础知识</summary></entry><entry><title type="html">【Java基础篇】第1章：Java程序设计概述</title><link href="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html" rel="alternate" type="text/html" title="【Java基础篇】第1章：Java程序设计概述" /><published>2017-10-23T16:21:57+08:00</published><updated>2017-10-23T16:21:57+08:00</updated><id>http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0</id><content type="html" xml:base="http://localhost:4000/java%E5%9F%BA%E7%A1%80%E7%AF%87/2017/10/23/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html">&lt;h2 id=&quot;java核心技术卷1基础知识&quot;&gt;Java核心技术.卷1基础知识&lt;/h2&gt;

&lt;h3 id=&quot;第1章java程序设计概述&quot;&gt;第1章：Java程序设计概述&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1996年Java第一次发布&lt;/li&gt;
  &lt;li&gt;Java的关键术语
    &lt;ul&gt;
      &lt;li&gt;简单性
        &lt;ul&gt;
          &lt;li&gt;相对C++而言，剔除了C++中不适当的特性，如头文件、指针运营、结构、联合、操作符重载、虚基类等&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;面向对象&lt;/li&gt;
      &lt;li&gt;分布式&lt;/li&gt;
      &lt;li&gt;健壮性
        &lt;ul&gt;
          &lt;li&gt;Java和C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;安全性
        &lt;ul&gt;
          &lt;li&gt;体系结构中立
            &lt;ul&gt;
              &lt;li&gt;Java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;可移植性
        &lt;ul&gt;
          &lt;li&gt;除用户界面有关的部分外，其他Java库都能很好的支持平台独立性&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;解释型
        &lt;ul&gt;
          &lt;li&gt;java解释器可以在任何移植了解释器的机器上执行Java字节码。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;高性能
        &lt;ul&gt;
          &lt;li&gt;字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定CPU的机器码。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;动态性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java语言的发展状况
&lt;img src=&quot;media/15087615445941.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Java" /><summary type="html">Java核心技术.卷1基础知识</summary></entry><entry><title type="html">35岁空杯心态重拾技术</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/10/23/35%E5%B2%81%E7%A9%BA%E6%9D%AF%E5%BF%83%E6%80%81%E9%87%8D%E6%8B%BE%E6%8A%80%E6%9C%AF.html" rel="alternate" type="text/html" title="35岁空杯心态重拾技术" /><published>2017-10-23T16:03:57+08:00</published><updated>2017-10-23T16:03:57+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/10/23/35%E5%B2%81%E7%A9%BA%E6%9D%AF%E5%BF%83%E6%80%81%E9%87%8D%E6%8B%BE%E6%8A%80%E6%9C%AF</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF/2017/10/23/35%E5%B2%81%E7%A9%BA%E6%9D%AF%E5%BF%83%E6%80%81%E9%87%8D%E6%8B%BE%E6%8A%80%E6%9C%AF.html">&lt;p&gt;至今35岁，算算时间，从事互联网行业已有12年，目前在公司混的也不差，也算中层技术管理，但是这几年在团队管理上花了太多时间，动手编码的时间变得很少（或者说几乎没有），不想找理由，更多的是自己的原因。。。虽然在看问题的视野，架构能力都有一定的提升，但是现在更多的是要靠团队成员才能完成，一些紧急的事情发生，也只能依赖别人，自己在一盘干着急。这种状态不是自己所喜欢的。&lt;/p&gt;

&lt;p&gt;前几天看「左耳朵耗子」的一篇文章，他从事IT行业20年，至今仍然在编码，他认为细节是魔鬼，代码中全是细节，只有掌握足够多的细节，设计出来的方案才是真正可以落地的，而不是模糊的。他非常清晰的知道每天要做什么，持续不断的提升核心竞争力。&lt;/p&gt;

&lt;p&gt;回想自己，如果一旦离开今天靠时间积累下来的成果，离开公司这个大平台，自己是否在别的功能都能立足的很好？只有自身有真正的能力才是最主要的。所以下定决定重拾技术，也填补内心的空虚（对技术无把控力的空虚）。&lt;/p&gt;

&lt;p&gt;只要坚持下去，相信一切都不会太晚。&lt;/p&gt;</content><author><name></name></author><category term="空杯心态" /><summary type="html">至今35岁，算算时间，从事互联网行业已有12年，目前在公司混的也不差，也算中层技术管理，但是这几年在团队管理上花了太多时间，动手编码的时间变得很少（或者说几乎没有），不想找理由，更多的是自己的原因。。。虽然在看问题的视野，架构能力都有一定的提升，但是现在更多的是要靠团队成员才能完成，一些紧急的事情发生，也只能依赖别人，自己在一盘干着急。这种状态不是自己所喜欢的。</summary></entry><entry><title type="html">It’s My First Article</title><link href="http://localhost:4000/jekyll/update/%E7%94%9F%E6%B4%BB/2017/10/22/Its-My-First-Article.html" rel="alternate" type="text/html" title="It's My First Article" /><published>2017-10-22T11:50:57+08:00</published><updated>2017-10-22T11:50:57+08:00</updated><id>http://localhost:4000/jekyll/update/%E7%94%9F%E6%B4%BB/2017/10/22/Its-My-First-Article</id><content type="html" xml:base="http://localhost:4000/jekyll/update/%E7%94%9F%E6%B4%BB/2017/10/22/Its-My-First-Article.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="生活" /><category term="Other" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/10/20/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-10-20T11:50:57+08:00</published><updated>2017-10-20T11:50:57+08:00</updated><id>http://localhost:4000/jekyll/update/2017/10/20/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/10/20/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>